tidyr::pivot_wider(x)
tidyr::pivot_wider(x,cat)
x
tidyr::pivot_longer(x,cat)
result=GSWdensity %>%
dplyr::mutate(reach=factor(reach,levels=c("upstream","urban","downstream"))) %>%
dplyr::arrange(reach) %>%
dplyr::mutate(stats=purrr::map2(proportions,means,~dplyr::left_join(.x,.y,by="cat"))) %>%
dplyr::mutate(stats=purrr::map(stats,~tibble(group=c("G1","G2","G3"),
proportions=.x$proportions,
means=.x$means)))
result
result$stats
result=GSWdensity %>%
dplyr::mutate(reach=factor(reach,levels=c("upstream","urban","downstream"))) %>%
dplyr::arrange(reach) %>%
dplyr::mutate(stats=purrr::map2(proportions,means,~dplyr::left_join(.x,.y,by="cat"))) %>%
dplyr::mutate(stats=purrr::map(stats,~tibble(what=c("group","means","proportions"),
G1=c(.x$means[1],.x$proportions[1]),
G2=c(.x$means[2],.x$proportions[2]),
G3=c(.x$means[3],.x$proportions[3]))))
result=GSWdensity %>%
dplyr::mutate(reach=factor(reach,levels=c("upstream","urban","downstream"))) %>%
dplyr::arrange(reach) %>%
dplyr::mutate(stats=purrr::map2(proportions,means,~dplyr::left_join(.x,.y,by="cat"))) %>%
dplyr::mutate(stats=purrr::map(stats,~tibble(what=c("group","means","proportions"),
G1=c(.x$means[1],.x$proportions[1]),
G2=c(.x$means[2],.x$proportions[2]),
G3=c(.x$means[3],.x$proportions[3]))))
result=GSWdensity %>%
dplyr::mutate(reach=factor(reach,levels=c("upstream","urban","downstream"))) %>%
dplyr::arrange(reach) %>%
dplyr::mutate(stats=purrr::map2(proportions,means,~dplyr::left_join(.x,.y,by="cat"))) %>%
dplyr::mutate(stats=purrr::map(stats,~tibble(what=c("means","proportions"),
G1=c(.x$means[1],.x$proportions[1]),
G2=c(.x$means[2],.x$proportions[2]),
G3=c(.x$means[3],.x$proportions[3]))))
result
result$stats
result=GSWdensity %>%
dplyr::mutate(reach=factor(reach,levels=c("upstream","urban","downstream"))) %>%
dplyr::arrange(reach) %>%
dplyr::mutate(stats=purrr::map2(proportions,means,~dplyr::left_join(.x,.y,by="cat"))) %>%
dplyr::mutate(stats=purrr::map(stats,~tibble(what=c("means","proportions"),
G1=c(.x$means[1],.x$proportions[1]),
G2=c(.x$means[2],.x$proportions[2]),
G3=c(.x$means[3],.x$proportions[3])))) %>%                       %>%
result=GSWdensity %>%
dplyr::mutate(reach=factor(reach,levels=c("upstream","urban","downstream"))) %>%
dplyr::arrange(reach) %>%
dplyr::mutate(stats=purrr::map2(proportions,means,~dplyr::left_join(.x,.y,by="cat"))) %>%
dplyr::mutate(stats=purrr::map(stats,~tibble(what=c("means","proportions"),
G1=c(.x$means[1],.x$proportions[1]),
G2=c(.x$means[2],.x$proportions[2]),
G3=c(.x$means[3],.x$proportions[3])))) %>%
dplyr::select(zone,reach,stats) %>%
tidyr::unnest(cols=c("stats")) %>%
dplyr::select(zone,reach,what,G1,G2,G3)
result
library(glourbapp)
runApp()
result=GSWdensity %>%
dplyr::mutate(reach=factor(reach,levels=c("upstream","urban","downstream"))) %>%
dplyr::arrange(reach) %>%
dplyr::mutate(stats=purrr::map2(proportions,means,~dplyr::left_join(.x,.y,by="cat"))) %>%
dplyr::mutate(stats=purrr::map2(stats,~dplyr::mutate(.x,
means=round(means,2),
proportions=round(proportions,3)))) %>%
dplyr::mutate(stats=purrr::map(stats,~tibble(what=c("means","proportions"),
G1=c(.x$means[1],.x$proportions[1]),
G2=c(.x$means[2],.x$proportions[2]),
G3=c(.x$means[3],.x$proportions[3])))) %>%
dplyr::select(zone,reach,stats) %>%
tidyr::unnest(cols=c("stats")) %>%
dplyr::select(zone,reach,what,G1,G2,G3)
result=GSWdensity %>%
dplyr::mutate(reach=factor(reach,levels=c("upstream","urban","downstream"))) %>%
dplyr::arrange(reach) %>%
dplyr::mutate(stats=purrr::map2(proportions,means,~dplyr::left_join(.x,.y,by="cat"))) %>%
dplyr::mutate(stats=purrr::map(stats,~dplyr::mutate(.x,
means=round(means,2),
proportions=round(proportions,3)))) %>%
dplyr::mutate(stats=purrr::map(stats,~tibble(what=c("means","proportions"),
G1=c(.x$means[1],.x$proportions[1]),
G2=c(.x$means[2],.x$proportions[2]),
G3=c(.x$means[3],.x$proportions[3])))) %>%
dplyr::select(zone,reach,stats) %>%
tidyr::unnest(cols=c("stats")) %>%
dplyr::select(zone,reach,what,G1,G2,G3)
result
source("~/ShinyApps/glourbapp/R/mod_percity.R")
library(glourbapp)
runApp()
library(glourbapp)
DT::DataTableOutput
DT::dataTableOutput
library(glourbapp)
shiny::runApp()
library(glourbapp)
ls()
runApp()
library(glourbapp)
library(glourbapp)
runApp()
library(glourbapp)
library(glourbapp)
tibble
library(tibble)
mod_percity
library(glourbapp)
library(glourbapp)
GSWdensity=readRDS(system.file(
"GSWdensity.RDS",
package="glourbapp")) %>%
dplyr::filter(UrbanAggl==input$city) %>%
dplyr::ungroup() %>%
dplyr::arrange(reach,zone)
input=list(city="Lyon")
GSWdensity=readRDS(system.file(
"GSWdensity.RDS",
package="glourbapp")) %>%
dplyr::filter(UrbanAggl==input$city) %>%
dplyr::ungroup() %>%
dplyr::arrange(reach,zone)
result=GSWdensity %>%
dplyr::mutate(reach=factor(reach,levels=c("upstream","urban","downstream"))) %>%
dplyr::arrange(reach) %>%
dplyr::mutate(stats=purrr::map(gmm_results,~data.frame(
what=c("mean","sd","prop"),
G1=c(.x$mean[1],sqrt(.x$var[1]),.x$prop[1]),
G2=c(.x$mean[2],sqrt(.x$var[2]),.x$prop[2]),
G3=c(.x$mean[3],sqrt(.x$var[3]),.x$prop[3])))) %>%
dplyr::select(zone,reach,stats) %>%
tidyr::unnest(cols=c("stats")) %>%
dplyr::select(zone,reach,what,G1,G2,G3)
GSWdensity
library(glourbapp)
GSWdensity=readRDS(system.file(
"GSWdensity.RDS",
package="glourbapp")) %>%
dplyr::filter(UrbanAggl==input$city) %>%
dplyr::ungroup() %>%
dplyr::arrange(reach,zone)
colnames(GSWdensity)
readRDS("inst/GSWdensity.RDS") %>% colnames(-)
readRDS("inst/GSWdensity.RDS") %>% colnames()
readRDS("inst/GSWdensity.RDS") %>% colnames()
library(glourbapp)
GSWdensity=readRDS(system.file(
"GSWdensity.RDS",
package="glourbapp")) %>%
dplyr::filter(UrbanAggl==input$city) %>%
dplyr::ungroup() %>%
dplyr::arrange(reach,zone)
result=GSWdensity %>%
dplyr::mutate(reach=factor(reach,levels=c("upstream","urban","downstream"))) %>%
dplyr::arrange(reach) %>%
dplyr::mutate(stats=purrr::map(gmm_results,~data.frame(
what=c("mean","sd","prop"),
G1=c(.x$mean[1],sqrt(.x$var[1]),.x$prop[1]),
G2=c(.x$mean[2],sqrt(.x$var[2]),.x$prop[2]),
G3=c(.x$mean[3],sqrt(.x$var[3]),.x$prop[3])))) %>%
dplyr::select(zone,reach,stats) %>%
tidyr::unnest(cols=c("stats")) %>%
dplyr::select(zone,reach,what,G1,G2,G3)
result
runApp()
library(glourbapp)
runApp()
runApp()
GSWdensity=readRDS(system.file(
"GSWdensity.RDS",
package="glourbapp")) %>%
dplyr::filter(UrbanAggl==input$city) %>%
dplyr::ungroup() %>%
dplyr::arrange(reach,zone)
city_GSWdensity=GSWdensity
result=city_GSWdensity %>%
dplyr::mutate(plots=purrr::map2(.x=reach,.y=zone,
~glourbapp:::plot_density_facet(city_GSWdensity,
selected_reach=.x,
selected_zone=.y)))
selected_reach="upstream"
selected_zone="plain"
dat=GSWdensity %>%
dplyr::filter(reach==selected_reach,
zone==selected_zone)
dat_frequency=gmm_density(dat$gmm_results[[1]])
dat_frequency=glourbapp::gmm_density(dat$gmm_results[[1]])
dat_frequency=glourbapp:::gmm_density(dat$gmm_results[[1]])
dat_means=dat$gmm_results
dat_decile_density=dat$decile_density[[1]]
ggplot2::ggplot(dat_frequency)+
ggplot2::geom_rect(data=dat_decile_density, fill="dark grey",
ggplot2::aes(xmin=x1,xmax=x2,ymin=0,ymax=y))+
ggplot2::geom_line(data=dat_frequency,
ggplot2::aes(x=x,y=y,col=cat))+
ggplot2::labs(x = "Value", y = "Proportion") +
ggplot2::theme_minimal()+
ggplot2::geom_vline(xintercept=0,linetype=3)+
ggplot2::geom_vline(data=dat_means,
ggplot2::aes(xintercept=mean, col=cat),
linetype=3)+
ggplot2::ggtitle(paste(selected_reach,selected_zone,sep="-"))+
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
dat_frequency
ggplot2::ggplot(dat_frequency)+
ggplot2::geom_rect(data=dat_decile_density, fill="dark grey",
ggplot2::aes(xmin=x1,xmax=x2,ymin=0,ymax=y))
ggplot2::ggplot(dat_frequency)+
ggplot2::geom_rect(data=dat_decile_density, fill="dark grey",
ggplot2::aes(xmin=x1,xmax=x2,ymin=0,ymax=y))+
ggplot2::geom_line(data=dat_frequency,
ggplot2::aes(x=x,y=y,col=cat))
dat_frequency=glourbapp:::gmm_density(dat$gmm_results[[1]])*n
GSWdensity
n=dat$gmm_results[[1]]$n %>% unique()
n
GSWdensity
n=dat$max_extent
n
dat_frequency=glourbapp:::gmm_density(dat$gmm_results[[1]])*n
n=dat$max_extent
glourbapp:::gmm_density(dat$gmm_results[[1]])
dat_frequency=glourbapp:::gmm_density(dat$gmm_results[[1]]) %>%
dplyr::mutate(y=y*n)
dat_means=dat$gmm_results
dat_decile_density=dat$decile_density[[1]]
ggplot2::ggplot(dat_frequency)+
ggplot2::geom_rect(data=dat_decile_density, fill="dark grey",
ggplot2::aes(xmin=x1,xmax=x2,ymin=0,ymax=y))+
ggplot2::geom_line(data=dat_frequency,
ggplot2::aes(x=x,y=y,col=cat))+
ggplot2::labs(x = "Value", y = "Proportion") +
ggplot2::theme_minimal()+
ggplot2::geom_vline(xintercept=0,linetype=3)+
ggplot2::geom_vline(data=dat_means,
ggplot2::aes(xintercept=mean, col=cat),
linetype=3)+
ggplot2::ggtitle(paste(selected_reach,selected_zone,sep="-"))+
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
ggplot2::ggplot(dat_frequency)+
ggplot2::geom_rect(data=dat_decile_density, fill="dark grey",
ggplot2::aes(xmin=x1,xmax=x2,ymin=0,ymax=y))+
ggplot2::geom_line(data=dat_frequency,
ggplot2::aes(x=x,y=y,col=cat))+
ggplot2::labs(x = "Value", y = "Proportion")
ggplot2::ggplot(dat_frequency)+
ggplot2::geom_rect(data=dat_decile_density, fill="dark grey",
ggplot2::aes(xmin=x1,xmax=x2,ymin=0,ymax=y))+
ggplot2::geom_line(data=dat_frequency,
ggplot2::aes(x=x,y=y,col=cat))+
ggplot2::labs(x = "Value", y = "Proportion") +
ggplot2::theme_minimal()+
ggplot2::geom_vline(xintercept=0,linetype=3)+
ggplot2::geom_vline(data=dat_means,
ggplot2::aes(xintercept=mean, col=cat),
linetype=3)+
ggplot2::ggplot(dat_frequency)+
ggplot2::geom_rect(data=dat_decile_density, fill="dark grey",
ggplot2::aes(xmin=x1,xmax=x2,ymin=0,ymax=y))+
ggplot2::geom_line(data=dat_frequency,
ggplot2::aes(x=x,y=y,col=cat))+
ggplot2::labs(x = "Value", y = "Proportion") +
ggplot2::theme_minimal()+
ggplot2::geom_vline(xintercept=0,linetype=3)+
ggplot2::geom_vline(data=dat_means,
ggplot2::aes(xintercept=mean, col=cat),
linetype=3)
dat_means
dat_means=dat$gmm_results[[1]]
ggplot2::ggplot(dat_frequency)+
ggplot2::geom_rect(data=dat_decile_density, fill="dark grey",
ggplot2::aes(xmin=x1,xmax=x2,ymin=0,ymax=y))+
ggplot2::geom_line(data=dat_frequency,
ggplot2::aes(x=x,y=y,col=cat))+
ggplot2::labs(x = "Value", y = "Proportion") +
ggplot2::theme_minimal()+
ggplot2::geom_vline(xintercept=0,linetype=3)+
ggplot2::geom_vline(data=dat_means,
ggplot2::aes(xintercept=mean, col=cat),
linetype=3)+
ggplot2::ggtitle(paste(selected_reach,selected_zone,sep="-"))+
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
library(glourbapp)
runApp()
library(glourbapp)
library(glourbapp)
??datatable
?renderTable
library(glourbapp)
runApp()
DT::DTOutput
library(glourbapp)
runApp()
library(glourbapp)
runApp()
library(glourbapp)
runApp()
runApp()
runApp()
glourbi::all_cities %>% head()
?selectInput
tagList(
golem_add_external_resources(),
fluidRow(column(width=3,
radioButtons(ns("selection"),
"cities in selection",
c("selection 0","selection 1"),
selected="selection 0"),
wellPanel(
selectInput(ns("select_var"),
label="choose variable",
selected="cluster",
choices=c("cluster",
c(glourbi::sep_vars(glourbi::all_cities)$vars_cat,
glourbi::sep_vars(glourbi::all_cities)$vars_num))),
textOutput(ns("description_var")),
conditionalPanel(
condition = "input.select_var == 'cluster'",ns=ns,
numericInput(ns("nclust"),
"cluster: nb of classes",
min=2,max=30, value=2)
)
),#wellPanel
plotOutput(ns("plot_palette"))
),#column
column(width=9,
leaflet::leafletOutput(ns("global_map")),
tabsetPanel(
tabPanel("city",
fluidRow(
column(width=6,
"Choose a city by clicking on the map, or here",
selectInput(ns("city_selected"),
"select by name",
choices=glourbi::all_cities$Urban.Aggl,
selected="Lyon"),
uiOutput(ns("city_name"))
),#column
column(width=6,
plotOutput(ns("plot_city")))#column
)#fluidRow
),#tabPanel
tabPanel("univar",
checkboxInput(ns("distrib_by_class"),
"display univar distribution by cluster"),
plotOutput(ns("plot_distrib"))
),#tabPanel
tabPanel("multivar",
fluidRow(
column(width=6,
plotly::plotlyOutput(ns("varpcaplot"))),
column(width=6,
plotly::plotlyOutput(ns("indpcaplot")))
)#fluidRow
),#tabPanel
tabPanel("boxplots",
checkboxInput(ns("display_ranks"),
label="display ranks",
value=TRUE),
plotOutput(ns("description_clusters"))
),#tabPanel
tabPanel("data",
downloadButton(ns("download_btn"), "Download this data"),
DT::dataTableOutput(ns("tableclust"))
),#tabPanel
tabPanel("test",
textOutput(ns("test"))
)#tabPanel
)#tabsetPanel
)#column
)#fluidRow
)#tagList
source("~/ShinyApps/glourbapp/dev/run_dev.R")
# Run the application
run_app()
glourbi::all_cities %>% dim()
glourbi::all_cities %>% filter(selection=="selection 1")
glourbi::all_cities %>% select(selection)
library(tidyverse)
glourbi::all_cities %>% select(selection)
colnames(glourbi::all_cities)
glourbi::all_cities %>% pull(selection1) %>% table()
source("~/ShinyApps/glourbapp/dev/run_dev.R")
# Run the application
run_app()
glourbi::all_cities
devtools::install_github("lvaudor/glourbi")
# Run the application
run_app()
library(glourbapp)
runApp()
library(glourbapp)
runApp()
glourbi::plot_pca
runApp()
library(glourbapp)
glourbi::plot_pca(dataset=glourbi::all_cities,
r_calc_pca(),
type="ind",
highlight_subset=glourbi::all_cities %>%
dplyr::filter(ID==r_get_city()))
glourbi::all_cities$ID
glourbi::plot_pca(dataset=glourbi::all_cities,
r_calc_pca(),
type="ind",
highlight_subset=glourbi::all_cities %>%
dplyr::filter(ID=="998296_23681")
)
runApp()
runApp()
all_cities=glourbi::all_cities
#' mypca=run_pca(all_cities,quali.sup="clco")
#' plot_pca(all_cities,mypca, type="var")
#' plot_pca(all_cities,mypca, type="ind")
#'
#' all_cities_clust=run_hclust(all_cities, nclust=10)
#' mypca=run_pca(all_cities_clust,quali.sup="cluster")
#' plot_pca(all_cities_clust,mypca,type="var")
#' plot_pca(all_cities_clust,mypca,type="ind")
#'
#' mypca=run_pca(all_cities_clust,quali.sup="X2018")
#' plot_pca(all_cities_clust,mypca,type="var")
#' plot_pca(all_cities_clust,mypca,type="ind")
#' plot_pca(all_cities_clust,mypca,type="ind",highlight_subset=dataset %>% dplyr::filter(Urban.Aggl=="Lyon"))
mypca=glourbi::run_pca(all_cities_clust,quali.sup="X2018")
all_cities_clust=run_hclust(all_cities, nclust=10)
mypca=glourbi::run_pca(all_cities_clust,quali.sup="cluster")
mypca=glourbi::run_pca(all_cities_clust,quali.sup="X2018")
plot_pca(all_cities_clust,mypca,type="var")
plot_pca(all_cities_clust,mypca,type="ind")
plot_pca(all_cities_clust,mypca,type="ind",highlight_subset=dataset %>% dplyr::filter(Urban.Aggl=="Lyon"))
plot_pca(all_cities_clust,mypca,type="ind",
highlight_subset=dataset %>% dplyr::filter(Urban.Aggl=="Lyon"))
plot_pca(all_cities_clust,mypca,type="ind",
highlight_subset=all_cities_clust %>% dplyr::filter(Urban.Aggl=="Lyon"))
library(glourbapp)
runApp()
data::all_cities
glourbi::all_cities
glourbi::all_cities %>% select(name)
glourbi::all_cities %>% dplyr::select(name)
library(glourbapp)
runApp()
colnames(glourbi::all_cities)
source("~/ShinyApps/glourbapp/dev/run_dev.R")
library(glourbapp)
shiny::runApp()
library(glourbapp)
runApp()
runApp()
library(glourbapp)
runApp()
glourbapp::all_cities
glourbapp::all_cities
glourbapp::all_cities %>%
dplyr::filter(selection1==TRUE) %>%
pull(Urban.Aggl)
glourbapp::all_cities %>%
dplyr::filter(selection1==TRUE) %>%
pull(Urban.Aggl)
glourbapp::all_cities %>%
dplyr::filter(selection1==TRUE) %>%
dplyr::pull(Urban.Aggl))
glourbapp::all_cities %>%
dplyr::filter(selection1==TRUE) %>%
dplyr::pull(Urban.Aggl)
glourbi::all_cities %>%
dplyr::filter(selection1==TRUE) %>%
dplyr::pull(Urban.Aggl)
glourbi::all_cities %>%
dplyr::filter(selection1==TRUE) %>%
dplyr::pull(Urban.Aggl) %>% sort()
library(glourbapp)
runApp()
runApp()
runApp()
library(glourbapp)
runApp()
source("~/ShinyApps/glourbapp/R/mod_WP3.R")
rm(list=ls())
library(glourbapp)
runApp()
library(glourbapp)
runApp()
runApp()
install.packages("sf")
runApp()
shiny::runApp()
runApp()
?checkboxGroupIntput
library(glourbapp)
shiny::runApp()
library(glourbapp)
runApp()
library(glourbapp)
runApp()
library(glourbapp)
library(glourbapp)
?leaflet::markerClusterOptions()
runApp()
library(glourbapp)
runApp()
runApp()
library(glourbapp)
runApp()
library(glourbapp)
runApp()
runApp()
mapinfo_shp_168828_22396 <- readRDS("~/ShinyApps/glourbapp/inst/mapinfo/mapinfo_shp_168828_22396.RDS")
mapinfo_shp_168828_22396
